<!DOCTYPE html>
<html>

<head>
    <style>
        #tickerScroller {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            padding: 12px 0;
            pointer-events: none;
            z-index: 999;
            background-color: black;
        }

        #tickerContainer {
            position: relative;
            white-space: nowrap;
            font-family: Arial, sans-serif;
            background-color: black;
            color: white;
            overflow: hidden;
            width: 100%;
            padding: 4px 0;
            animation: tickerMove linear infinite;
            animation-duration: 120s; /* Adjust duration for speed */
        }

        .tickerText {
            display: inline-block;
            margin-right: 20px;
            color: white;
        }

        @keyframes tickerMove {
            0% {
                transform: translateX(100%);
            }

            100% {
                transform: translateX(-100%);
            }
        }

        /* Mobile Responsiveness */
        @media only screen and (max-width: 600px) {
            #tickerScroller {
                padding: 12px 0;
            }

            .tickerText {
                font-size: 12px;
                /* Smaller font for mobile */
            }
        }
    </style>
    </style>
</head>

<body>
    <div id="tickerScroller">
        <div id="tickerContainer"></div>
    </div>

    <script>
        async function fetchCryptoData() {
            try {
                // Define the top 25 cryptocurrency IDs in an array
                const top25CoinIds = [
                    "bitcoin",
                    "ethereum",
                    "tether",
                    "cardano",
                    "usd-coin",
                    "solana",
                    "polkadot",
                    "dogecoin",
                    "avalanche-2",
                    "terra-luna",
                    "binance-usd",
                    "wrapped-bitcoin",
                    "litecoin",
                    "chainlink",
                    "algorand",
                    "bitcoin-cash",
                    "matic-network",
                    "internet-computer",
                    "stellar",
                    "filecoin",
                    "tron",
                    "ethereum-classic",
                    "vechain",
                ];

                const url = `https://api.coingecko.com/api/v3/simple/price?ids=${top25CoinIds.join(
                    ","
                )}&vs_currencies=usd&include_24hr_change=true`;
                const response = await fetch(url);
                const data = await response.json();

                console.log("Fetched data:", data);

                return top25CoinIds.map((id) => ({
                    name: id.toLocaleUpperCase(),
                    value: data[id].usd,
                    change: data[id].usd_24h_change,
                }));
            } catch (error) {
                console.error("Failed to fetch data:", error);
                return [];
            }
        }

        function createTickerItem(item) {
            const span = document.createElement("span");
            span.className = "tickerText";
            const trendSymbol = item.change >= 0 ? "↑" : "↓";
            const trendColor = item.change >= 0 ? "green" : "red";
            span.innerHTML = `<span style='color: ${trendColor};'> ${item.name}</span>: <span style='color: ${trendColor};'> ${item.value} </span> <span style='color: ${trendColor};'>${trendSymbol}</span>`;
            return span;
        }

        async function updateTicker() {
            const cryptoData = await fetchCryptoData();
            const tickerContainer = document.getElementById("tickerContainer");
            tickerContainer.innerHTML = ""; // Clear existing ticker items
            cryptoData.forEach(item => tickerContainer.appendChild(createTickerItem(item)));
        }

        document.addEventListener("DOMContentLoaded", async () => {
            await updateTicker();
            setInterval(updateTicker, 120000); // Update every 60 seconds
        });
    </script>
</body>

</html>